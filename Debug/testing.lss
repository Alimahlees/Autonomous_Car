
testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000076  00800060  00000e96  00000f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  008000d6  008000d6  00000fa0  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016bf  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000054c7  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000054d8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000004e6  00000000  00000000  00005514  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a3  00000000  00000000  000059fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00005e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  00005eb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3d       	cpi	r26, 0xD6	; 214
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ed       	ldi	r26, 0xD6	; 214
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 31       	cpi	r26, 0x17	; 23
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 06 03 	call	0x60c	; 0x60c <main>
  8a:	0c 94 49 07 	jmp	0xe92	; 0xe92 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PWM2_Init>:
 */
#include "PWM2.h"


void PWM2_Init(){
	TCCR2 = (1<<6) | (1<<3) | (1<<5) | (1<<0) | (1<<1) | (1<<2);
  92:	8f e6       	ldi	r24, 0x6F	; 111
  94:	85 bd       	out	0x25, r24	; 37

	Dio_ConfigChannel(DIO_PORTD, DIO_PIN7, OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	67 e0       	ldi	r22, 0x07	; 7
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <Dio_ConfigChannel>

000000a0 <ICP_Init>:

#include "ICP.h"

void ICP_Init(){
	//TIMSK = (1 << 1);	/* Enable Timer1 overflow interrupts */
	SET_BIT(TIMSK, 2);
  a0:	89 b7       	in	r24, 0x39	; 57
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
  a6:	1f bc       	out	0x2f, r1	; 47
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN0, INPUT);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <Dio_ConfigChannel>

000000b2 <ICP_Value>:

}


u32 ICP_Value(u8 TimerOverflow){
			TCNT1 = 0;	/* Clear Timer counter */
  b2:	1d bc       	out	0x2d, r1	; 45
  b4:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	8e bd       	out	0x2e, r24	; 46
			TIFR = 1<<5;	/* Clear ICP flag (Input Capture flag) */
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	88 bf       	out	0x38, r24	; 56
			TIFR = 1<<2;	/* Clear Timer Overflow flag */
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	88 bf       	out	0x38, r24	; 56

			/*Calculate width of Echo by Input Capture (ICP) */

			while ((TIFR & (1 << 5)) == 0);/* Wait for rising edge */
  c2:	08 b6       	in	r0, 0x38	; 56
  c4:	05 fe       	sbrs	r0, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <ICP_Value+0x10>
			TCNT1 = 0;	/* Clear Timer counter */
  c8:	1d bc       	out	0x2d, r1	; 45
  ca:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8e bd       	out	0x2e, r24	; 46
			TIFR = 1<<5;	/* Clear ICP flag (Input Capture flag) */
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	88 bf       	out	0x38, r24	; 56
			TIFR = 1<<2;	/* Clear Timer Overflow flag */
  d4:	84 e0       	ldi	r24, 0x04	; 4
  d6:	88 bf       	out	0x38, r24	; 56
			TimerOverflow = 0;/* Clear Timer overflow count */

			while ((TIFR & (1 << 5)) == 0);/* Wait for falling edge */
  d8:	08 b6       	in	r0, 0x38	; 56
  da:	05 fe       	sbrs	r0, 5
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <ICP_Value+0x26>
			u32 count = ICR1 + (65535 * TimerOverflow);	/* Take count */
  de:	66 b5       	in	r22, 0x26	; 38
  e0:	77 b5       	in	r23, 0x27	; 39
			return count;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
			/* 8MHz Timer freq, sound speed =343 m/s */


}
  e6:	08 95       	ret

000000e8 <Glbl_Interrupt_Enable>:

#include "Glbl_INT.h"

void Glbl_Interrupt_Enable()
{
	SET_BIT(GLBL_SREG_REG,7);
  e8:	8f b7       	in	r24, 0x3f	; 63
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8f bf       	out	0x3f, r24	; 63
  ee:	08 95       	ret

000000f0 <Glbl_Interrupt_Disable>:
}
void Glbl_Interrupt_Disable()
{
	CLR_BIT(GLBL_SREG_REG,7);
  f0:	8f b7       	in	r24, 0x3f	; 63
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	8f bf       	out	0x3f, r24	; 63
  f6:	08 95       	ret

000000f8 <Dio_ConfigChannel>:
#include "Dio.h"

/*DDRx      DDRA, DDRB, DDRC, DDRD*/
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
	switch (port)
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	a9 f0       	breq	.+42     	; 0x126 <Dio_ConfigChannel+0x2e>
  fc:	28 f0       	brcs	.+10     	; 0x108 <Dio_ConfigChannel+0x10>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	09 f1       	breq	.+66     	; 0x144 <Dio_ConfigChannel+0x4c>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	71 f1       	breq	.+92     	; 0x162 <Dio_ConfigChannel+0x6a>
 106:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == INPUT)
		{
			CLR_BIT(DIO_DDRA_REG,pin);
 108:	2a b3       	in	r18, 0x1a	; 26
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	01 c0       	rjmp	.+2      	; 0x112 <Dio_ConfigChannel+0x1a>
 110:	88 0f       	add	r24, r24
 112:	6a 95       	dec	r22
 114:	ea f7       	brpl	.-6      	; 0x110 <Dio_ConfigChannel+0x18>
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
	switch (port)
	{
	case DIO_PORTA:
		if (direction == INPUT)
 116:	41 11       	cpse	r20, r1
 118:	03 c0       	rjmp	.+6      	; 0x120 <Dio_ConfigChannel+0x28>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	01 c0       	rjmp	.+2      	; 0x122 <Dio_ConfigChannel+0x2a>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
 120:	82 2b       	or	r24, r18
 122:	8a bb       	out	0x1a, r24	; 26
 124:	08 95       	ret
		break;

	case DIO_PORTB:
		if (direction == INPUT)
		{
			CLR_BIT(DIO_DDRB_REG,pin);
 126:	27 b3       	in	r18, 0x17	; 23
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 c0       	rjmp	.+2      	; 0x130 <Dio_ConfigChannel+0x38>
 12e:	88 0f       	add	r24, r24
 130:	6a 95       	dec	r22
 132:	ea f7       	brpl	.-6      	; 0x12e <Dio_ConfigChannel+0x36>
			SET_BIT(DIO_DDRA_REG,pin);
		}
		break;

	case DIO_PORTB:
		if (direction == INPUT)
 134:	41 11       	cpse	r20, r1
 136:	03 c0       	rjmp	.+6      	; 0x13e <Dio_ConfigChannel+0x46>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
 138:	80 95       	com	r24
 13a:	82 23       	and	r24, r18
 13c:	01 c0       	rjmp	.+2      	; 0x140 <Dio_ConfigChannel+0x48>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
 13e:	82 2b       	or	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
		break;

	case DIO_PORTC:
		if (direction == INPUT)
		{
			CLR_BIT(DIO_DDRC_REG,pin);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 c0       	rjmp	.+2      	; 0x14e <Dio_ConfigChannel+0x56>
 14c:	88 0f       	add	r24, r24
 14e:	6a 95       	dec	r22
 150:	ea f7       	brpl	.-6      	; 0x14c <Dio_ConfigChannel+0x54>
			SET_BIT(DIO_DDRB_REG,pin);
		}
		break;

	case DIO_PORTC:
		if (direction == INPUT)
 152:	41 11       	cpse	r20, r1
 154:	03 c0       	rjmp	.+6      	; 0x15c <Dio_ConfigChannel+0x64>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	01 c0       	rjmp	.+2      	; 0x15e <Dio_ConfigChannel+0x66>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
 15c:	82 2b       	or	r24, r18
 15e:	84 bb       	out	0x14, r24	; 20
 160:	08 95       	ret
		break;

	case DIO_PORTD:
		if (direction == INPUT)
		{
			CLR_BIT(DIO_DDRD_REG,pin);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	01 c0       	rjmp	.+2      	; 0x16c <Dio_ConfigChannel+0x74>
 16a:	88 0f       	add	r24, r24
 16c:	6a 95       	dec	r22
 16e:	ea f7       	brpl	.-6      	; 0x16a <Dio_ConfigChannel+0x72>
			SET_BIT(DIO_DDRC_REG,pin);
		}
		break;

	case DIO_PORTD:
		if (direction == INPUT)
 170:	41 11       	cpse	r20, r1
 172:	03 c0       	rjmp	.+6      	; 0x17a <Dio_ConfigChannel+0x82>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	01 c0       	rjmp	.+2      	; 0x17c <Dio_ConfigChannel+0x84>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <Dio_WriteChannel>:
		break;
	}
}
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
	switch (port)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	a9 f0       	breq	.+42     	; 0x1ae <Dio_WriteChannel+0x2e>
 184:	28 f0       	brcs	.+10     	; 0x190 <Dio_WriteChannel+0x10>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	09 f1       	breq	.+66     	; 0x1cc <Dio_WriteChannel+0x4c>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	71 f1       	breq	.+92     	; 0x1ea <Dio_WriteChannel+0x6a>
 18e:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
		{
			SET_BIT(DIO_PORTA_REG,pin);
 190:	2b b3       	in	r18, 0x1b	; 27
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 c0       	rjmp	.+2      	; 0x19a <Dio_WriteChannel+0x1a>
 198:	88 0f       	add	r24, r24
 19a:	6a 95       	dec	r22
 19c:	ea f7       	brpl	.-6      	; 0x198 <Dio_WriteChannel+0x18>
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
	switch (port)
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <Dio_WriteChannel+0x26>
		{
			SET_BIT(DIO_PORTA_REG,pin);
 1a2:	82 2b       	or	r24, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Dio_WriteChannel+0x2a>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
		{
			SET_BIT(DIO_PORTB_REG,pin);
 1ae:	28 b3       	in	r18, 0x18	; 24
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <Dio_WriteChannel+0x38>
 1b6:	88 0f       	add	r24, r24
 1b8:	6a 95       	dec	r22
 1ba:	ea f7       	brpl	.-6      	; 0x1b6 <Dio_WriteChannel+0x36>
			CLR_BIT(DIO_PORTA_REG,pin);
		}
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	11 f4       	brne	.+4      	; 0x1c4 <Dio_WriteChannel+0x44>
		{
			SET_BIT(DIO_PORTB_REG,pin);
 1c0:	82 2b       	or	r24, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <Dio_WriteChannel+0x48>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	08 95       	ret
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
		{
			SET_BIT(DIO_PORTC_REG,pin);
 1cc:	25 b3       	in	r18, 0x15	; 21
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <Dio_WriteChannel+0x56>
 1d4:	88 0f       	add	r24, r24
 1d6:	6a 95       	dec	r22
 1d8:	ea f7       	brpl	.-6      	; 0x1d4 <Dio_WriteChannel+0x54>
			CLR_BIT(DIO_PORTB_REG,pin);
		}
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <Dio_WriteChannel+0x62>
		{
			SET_BIT(DIO_PORTC_REG,pin);
 1de:	82 2b       	or	r24, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <Dio_WriteChannel+0x66>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	85 bb       	out	0x15, r24	; 21
 1e8:	08 95       	ret
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
		{
			SET_BIT(DIO_PORTD_REG,pin);
 1ea:	22 b3       	in	r18, 0x12	; 18
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <Dio_WriteChannel+0x74>
 1f2:	88 0f       	add	r24, r24
 1f4:	6a 95       	dec	r22
 1f6:	ea f7       	brpl	.-6      	; 0x1f2 <Dio_WriteChannel+0x72>
			CLR_BIT(DIO_PORTC_REG,pin);
		}
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	11 f4       	brne	.+4      	; 0x200 <Dio_WriteChannel+0x80>
		{
			SET_BIT(DIO_PORTD_REG,pin);
 1fc:	82 2b       	or	r24, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <Dio_WriteChannel+0x84>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	82 bb       	out	0x12, r24	; 18
 206:	08 95       	ret

00000208 <Dio_WriteGroup>:
		break;
	}
}
void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
	switch(port)
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	71 f0       	breq	.+28     	; 0x228 <Dio_WriteGroup+0x20>
 20c:	28 f0       	brcs	.+10     	; 0x218 <Dio_WriteGroup+0x10>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	99 f0       	breq	.+38     	; 0x238 <Dio_WriteGroup+0x30>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	c9 f0       	breq	.+50     	; 0x248 <Dio_WriteGroup+0x40>
 216:	08 95       	ret
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	96 2f       	mov	r25, r22
 21c:	90 95       	com	r25
 21e:	89 23       	and	r24, r25
 220:	46 23       	and	r20, r22
 222:	48 2b       	or	r20, r24
 224:	4b bb       	out	0x1b, r20	; 27
		break;
 226:	08 95       	ret

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 228:	8b b3       	in	r24, 0x1b	; 27
 22a:	96 2f       	mov	r25, r22
 22c:	90 95       	com	r25
 22e:	89 23       	and	r24, r25
 230:	46 23       	and	r20, r22
 232:	48 2b       	or	r20, r24
 234:	48 bb       	out	0x18, r20	; 24
		break;
 236:	08 95       	ret

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 238:	8b b3       	in	r24, 0x1b	; 27
 23a:	96 2f       	mov	r25, r22
 23c:	90 95       	com	r25
 23e:	89 23       	and	r24, r25
 240:	46 23       	and	r20, r22
 242:	48 2b       	or	r20, r24
 244:	45 bb       	out	0x15, r20	; 21
		break;
 246:	08 95       	ret

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
 248:	8b b3       	in	r24, 0x1b	; 27
 24a:	96 2f       	mov	r25, r22
 24c:	90 95       	com	r25
 24e:	89 23       	and	r24, r25
 250:	46 23       	and	r20, r22
 252:	48 2b       	or	r20, r24
 254:	42 bb       	out	0x12, r20	; 18
 256:	08 95       	ret

00000258 <Dio_TogglChannel>:
		break;
	}
}
void Dio_TogglChannel(port_type port,pin_type pin)
{
	switch (port)
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	81 f0       	breq	.+32     	; 0x27c <Dio_TogglChannel+0x24>
 25c:	28 f0       	brcs	.+10     	; 0x268 <Dio_TogglChannel+0x10>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	b9 f0       	breq	.+46     	; 0x290 <Dio_TogglChannel+0x38>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	f9 f0       	breq	.+62     	; 0x2a4 <Dio_TogglChannel+0x4c>
 266:	08 95       	ret
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
 268:	2b b3       	in	r18, 0x1b	; 27
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 c0       	rjmp	.+2      	; 0x272 <Dio_TogglChannel+0x1a>
 270:	88 0f       	add	r24, r24
 272:	6a 95       	dec	r22
 274:	ea f7       	brpl	.-6      	; 0x270 <Dio_TogglChannel+0x18>
 276:	82 27       	eor	r24, r18
 278:	8b bb       	out	0x1b, r24	; 27
		break;
 27a:	08 95       	ret

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
 27c:	28 b3       	in	r18, 0x18	; 24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	01 c0       	rjmp	.+2      	; 0x286 <Dio_TogglChannel+0x2e>
 284:	88 0f       	add	r24, r24
 286:	6a 95       	dec	r22
 288:	ea f7       	brpl	.-6      	; 0x284 <Dio_TogglChannel+0x2c>
 28a:	82 27       	eor	r24, r18
 28c:	88 bb       	out	0x18, r24	; 24
		break;
 28e:	08 95       	ret

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
 290:	25 b3       	in	r18, 0x15	; 21
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	01 c0       	rjmp	.+2      	; 0x29a <Dio_TogglChannel+0x42>
 298:	88 0f       	add	r24, r24
 29a:	6a 95       	dec	r22
 29c:	ea f7       	brpl	.-6      	; 0x298 <Dio_TogglChannel+0x40>
 29e:	82 27       	eor	r24, r18
 2a0:	85 bb       	out	0x15, r24	; 21
		break;
 2a2:	08 95       	ret

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
 2a4:	22 b3       	in	r18, 0x12	; 18
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <Dio_TogglChannel+0x56>
 2ac:	88 0f       	add	r24, r24
 2ae:	6a 95       	dec	r22
 2b0:	ea f7       	brpl	.-6      	; 0x2ac <Dio_TogglChannel+0x54>
 2b2:	82 27       	eor	r24, r18
 2b4:	82 bb       	out	0x12, r24	; 18
 2b6:	08 95       	ret

000002b8 <Dio_ReadChannel>:
	}
}
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
	level_type result = STD_LOW;
	switch (port)
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	49 f0       	breq	.+18     	; 0x2ce <Dio_ReadChannel+0x16>
 2bc:	30 f0       	brcs	.+12     	; 0x2ca <Dio_ReadChannel+0x12>
 2be:	82 30       	cpi	r24, 0x02	; 2
 2c0:	41 f0       	breq	.+16     	; 0x2d2 <Dio_ReadChannel+0x1a>
 2c2:	83 30       	cpi	r24, 0x03	; 3
 2c4:	79 f4       	brne	.+30     	; 0x2e4 <Dio_ReadChannel+0x2c>
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTD:
		if CHK_BIT(DIO_PIND_REG,pin)
 2c6:	80 b3       	in	r24, 0x10	; 16
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <Dio_ReadChannel+0x1c>
{
	level_type result = STD_LOW;
	switch (port)
	{
	case DIO_PORTA:
		if CHK_BIT(DIO_PINA_REG,pin)
 2ca:	89 b3       	in	r24, 0x19	; 25
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <Dio_ReadChannel+0x1c>
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTB:
		if CHK_BIT(DIO_PINB_REG,pin)
 2ce:	86 b3       	in	r24, 0x16	; 22
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <Dio_ReadChannel+0x1c>
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTC:
		if CHK_BIT(DIO_PINC_REG,pin)
 2d2:	83 b3       	in	r24, 0x13	; 19
		break;
	}
}
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
	level_type result = STD_LOW;
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <Dio_ReadChannel+0x24>
 2d8:	95 95       	asr	r25
 2da:	87 95       	ror	r24
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <Dio_ReadChannel+0x20>
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	08 95       	ret
 2e4:	80 e0       	ldi	r24, 0x00	; 0
			result = STD_LOW;
		}
		break;
	}
	return result;
}
 2e6:	08 95       	ret

000002e8 <UltraSonic_Init>:
#include <avr/io.h>
#include "ICP.h"

#define  Trigger_pin	PA0
void UltraSonic_Init(){
	Dio_ConfigChannel(DIO_PORTA, DIO_PIN0, OUTPUT);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	ICP_Init();
 2f2:	0c 94 50 00 	jmp	0xa0	; 0xa0 <ICP_Init>

000002f6 <Trigger_UltraSonic>:
}

void Trigger_UltraSonic(){


	Dio_WriteChannel(DIO_PORTA, DIO_PIN0, STD_HIGH);
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <Trigger_UltraSonic+0xc>
 306:	00 00       	nop
	_delay_us(10);
	Dio_WriteChannel(DIO_PORTA, DIO_PIN0, STD_LOW);
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0c 94 c0 00 	jmp	0x180	; 0x180 <Dio_WriteChannel>

00000312 <Echo_UltraSonic>:
}


u32 Echo_UltraSonic(u8 TimerOverflow){
	u32 count = ICP_Value(TimerOverflow);
 312:	0e 94 59 00 	call	0xb2	; 0xb2 <ICP_Value>
	double distance = (double)count / 466.47;
	return distance;
 316:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 31a:	29 e2       	ldi	r18, 0x29	; 41
 31c:	3c e3       	ldi	r19, 0x3C	; 60
 31e:	49 ee       	ldi	r20, 0xE9	; 233
 320:	53 e4       	ldi	r21, 0x43	; 67
 322:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
 326:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixunssfsi>
}
 32a:	08 95       	ret

0000032c <Servo_Init>:
 */

#include "Servo.h"

void Servo_Init(){
	PWM2_Init();
 32c:	0c 94 49 00 	jmp	0x92	; 0x92 <PWM2_Init>

00000330 <Servo_Angle>:
}

void Servo_Angle(u8 angle){
	OCR2 = angle;
 330:	83 bd       	out	0x23, r24	; 35
 332:	08 95       	ret

00000334 <Enable_Pulse>:
	Lcd_Goto_Row_Column(0,0);
	Lcd_Cmd(_LCD_CURSOR_OFF);
}
static void Enable_Pulse(void)
{
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
 33e:	85 e0       	ldi	r24, 0x05	; 5
 340:	8a 95       	dec	r24
 342:	f1 f7       	brne	.-4      	; 0x340 <Enable_Pulse+0xc>
 344:	00 00       	nop
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 350:	8f e3       	ldi	r24, 0x3F	; 63
 352:	9f e1       	ldi	r25, 0x1F	; 31
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <Enable_Pulse+0x20>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Enable_Pulse+0x26>
 35a:	00 00       	nop
 35c:	08 95       	ret

0000035e <Lcd_Data>:
	_delay_ms(2);
}

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
	u8 High_Nibble = data;    /*	MSB	*/
	u8 Low_Nibble = data<<4;		/*	LSB	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
 36c:	4c 2f       	mov	r20, r28
 36e:	60 ef       	ldi	r22, 0xF0	; 240
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 04 01 	call	0x208	; 0x208 <Dio_WriteGroup>
	Enable_Pulse();
 376:	0e 94 9a 01 	call	0x334	; 0x334 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
 37a:	4c 2f       	mov	r20, r28
 37c:	42 95       	swap	r20
 37e:	40 7f       	andi	r20, 0xF0	; 240
 380:	60 ef       	ldi	r22, 0xF0	; 240
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 04 01 	call	0x208	; 0x208 <Dio_WriteGroup>
	Enable_Pulse();
}
 388:	cf 91       	pop	r28
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
	Enable_Pulse();

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
	Enable_Pulse();
 38a:	0c 94 9a 01 	jmp	0x334	; 0x334 <Enable_Pulse>

0000038e <Lcd_Cmd>:
}

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
	u8 High_Nibble = cmd;    /*	MSB	*/
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
 39c:	4c 2f       	mov	r20, r28
 39e:	60 ef       	ldi	r22, 0xF0	; 240
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 04 01 	call	0x208	; 0x208 <Dio_WriteGroup>
	Enable_Pulse();
 3a6:	0e 94 9a 01 	call	0x334	; 0x334 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
 3aa:	4c 2f       	mov	r20, r28
 3ac:	42 95       	swap	r20
 3ae:	40 7f       	andi	r20, 0xF0	; 240
 3b0:	60 ef       	ldi	r22, 0xF0	; 240
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 04 01 	call	0x208	; 0x208 <Dio_WriteGroup>
	Enable_Pulse();
}
 3b8:	cf 91       	pop	r28
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
	Enable_Pulse();

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
	Enable_Pulse();
 3ba:	0c 94 9a 01 	jmp	0x334	; 0x334 <Enable_Pulse>

000003be <Lcd_Init>:
			}
	}
}

void Lcd_Init(void)
{
 3be:	ef 92       	push	r14
 3c0:	ff 92       	push	r15
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	66 e0       	ldi	r22, 0x06	; 6
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	67 e0       	ldi	r22, 0x07	; 7
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	62 e0       	ldi	r22, 0x02	; 2
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	62 e0       	ldi	r22, 0x02	; 2
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
 418:	8f e5       	ldi	r24, 0x5F	; 95
 41a:	9a ee       	ldi	r25, 0xEA	; 234
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop

	_delay_ms(15);

	Lcd_Cmd(3);
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
 42a:	8f e1       	ldi	r24, 0x1F	; 31
 42c:	9e e4       	ldi	r25, 0x4E	; 78
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	_delay_ms(5);
	Lcd_Cmd(3);
 436:	83 e0       	ldi	r24, 0x03	; 3
 438:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43c:	8f e8       	ldi	r24, 0x8F	; 143
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
	_delay_us(100);
	Lcd_Cmd(3);
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
	Lcd_Cmd(2);
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
 454:	88 e2       	ldi	r24, 0x28	; 40
 456:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
 45a:	87 ed       	ldi	r24, 0xD7	; 215
 45c:	e8 2e       	mov	r14, r24
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	f8 2e       	mov	r15, r24
 462:	c0 e4       	ldi	r28, 0x40	; 64
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
 464:	8c 2f       	mov	r24, r28
 466:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
 46a:	00 e0       	ldi	r16, 0x00	; 0
 46c:	10 e0       	ldi	r17, 0x00	; 0
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
 46e:	f7 01       	movw	r30, r14
 470:	e0 0f       	add	r30, r16
 472:	f1 1f       	adc	r31, r17
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
 474:	80 81       	ld	r24, Z
 476:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Data>
 47a:	0f 5f       	subi	r16, 0xFF	; 255
 47c:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 47e:	08 30       	cpi	r16, 0x08	; 8
 480:	11 05       	cpc	r17, r1
 482:	a9 f7       	brne	.-22     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 484:	c8 5f       	subi	r28, 0xF8	; 248
 486:	98 e0       	ldi	r25, 0x08	; 8
 488:	e9 0e       	add	r14, r25
 48a:	f1 1c       	adc	r15, r1
u8 customChar[8][8]; // extern hereeeeeeeeeeeeeeeeeeeeeeeeeee
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 48c:	c0 38       	cpi	r28, 0x80	; 128
 48e:	51 f7       	brne	.-44     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
void Lcd_Goto_Row_Column(u8 row, u8 col)
{
	switch (row)
	{
	case 0:
		Lcd_Cmd(0x80+col);
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
	Lcd_Cmd(3);
	Lcd_Cmd(2);
	Lcd_Cmd(_LCD_4BIT_MODE);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0,0);
	Lcd_Cmd(_LCD_CURSOR_OFF);
 496:	8c e0       	ldi	r24, 0x0C	; 12
}
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
	Lcd_Cmd(3);
	Lcd_Cmd(2);
	Lcd_Cmd(_LCD_4BIT_MODE);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0,0);
	Lcd_Cmd(_LCD_CURSOR_OFF);
 4a2:	0c 94 c7 01 	jmp	0x38e	; 0x38e <Lcd_Cmd>

000004a6 <Lcd_DisplayChr>:
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
 4a6:	0c 94 af 01 	jmp	0x35e	; 0x35e <Lcd_Data>

000004aa <Lcd_DisplayStr>:
}

void Lcd_DisplayStr(u8* str)
{
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
	while (*str != '\0')
 4b0:	89 91       	ld	r24, Y+
 4b2:	88 23       	and	r24, r24
 4b4:	19 f0       	breq	.+6      	; 0x4bc <Lcd_DisplayStr+0x12>
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
 4b6:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Data>
 4ba:	fa cf       	rjmp	.-12     	; 0x4b0 <Lcd_DisplayStr+0x6>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
	switch (row)
 4c2:	88 23       	and	r24, r24
 4c4:	19 f0       	breq	.+6      	; 0x4cc <Lcd_Goto_Row_Column+0xa>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <Lcd_Goto_Row_Column+0xe>
 4ca:	08 95       	ret
	{
	case 0:
		Lcd_Cmd(0x80+col);
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <Lcd_Goto_Row_Column+0x10>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
 4d0:	80 ec       	ldi	r24, 0xC0	; 192
 4d2:	86 0f       	add	r24, r22
 4d4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <Lcd_Cmd>

000004d8 <Lcd_DisplayNum>:
		break;
	}
}
void Lcd_DisplayNum(u16 num)
{
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
 4dc:	68 ee       	ldi	r22, 0xE8	; 232
 4de:	73 e0       	ldi	r23, 0x03	; 3
 4e0:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__udivmodhi4>
 4e4:	ec 01       	movw	r28, r24
 4e6:	80 e3       	ldi	r24, 0x30	; 48
 4e8:	86 0f       	add	r24, r22
 4ea:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Data>
 4ee:	ce 01       	movw	r24, r28
 4f0:	64 e6       	ldi	r22, 0x64	; 100
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__udivmodhi4>
 4f8:	ec 01       	movw	r28, r24
 4fa:	80 e3       	ldi	r24, 0x30	; 48
 4fc:	86 0f       	add	r24, r22
 4fe:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Data>
 502:	ce 01       	movw	r24, r28
 504:	6a e0       	ldi	r22, 0x0A	; 10
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__udivmodhi4>
 50c:	c8 2f       	mov	r28, r24
 50e:	80 e3       	ldi	r24, 0x30	; 48
 510:	86 0f       	add	r24, r22
 512:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Data>
 516:	80 e3       	ldi	r24, 0x30	; 48
 518:	8c 0f       	add	r24, r28
{
	Lcd_DisplayChr(num/1000 + '0');
	Lcd_DisplayChr(num%1000/100 + '0');
	Lcd_DisplayChr(num%1000%100/10 + '0');
	Lcd_DisplayChr(num%1000%100%10 + '0');
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
 51e:	0c 94 af 01 	jmp	0x35e	; 0x35e <Lcd_Data>

00000522 <LcdDisplayFloat>:
	Lcd_DisplayChr(num%1000%100/10 + '0');
	Lcd_DisplayChr(num%1000%100%10 + '0');
}

void LcdDisplayFloat(f64 floatNum)
{
 522:	8f 92       	push	r8
 524:	9f 92       	push	r9
 526:	af 92       	push	r10
 528:	bf 92       	push	r11
 52a:	cf 92       	push	r12
 52c:	df 92       	push	r13
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	4b 01       	movw	r8, r22
 534:	5c 01       	movw	r10, r24
	u16 intPart = 0;
	f64 fractionTemp = 0;
	u16 fractionPart = 0;

	intPart = (u16)floatNum;
 536:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixunssfsi>
 53a:	6b 01       	movw	r12, r22
 53c:	7c 01       	movw	r14, r24
	fractionTemp = floatNum - intPart;
	fractionPart = fractionTemp * 100;

	Lcd_DisplayNum(intPart);
 53e:	cb 01       	movw	r24, r22
 540:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Lcd_DisplayNum>
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
 544:	8e e2       	ldi	r24, 0x2E	; 46
 546:	0e 94 af 01 	call	0x35e	; 0x35e <Lcd_Data>
	fractionTemp = floatNum - intPart;
	fractionPart = fractionTemp * 100;

	Lcd_DisplayNum(intPart);
	Lcd_DisplayChr('.');
	Lcd_DisplayNum(fractionPart);
 54a:	b6 01       	movw	r22, r12
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 554:	9b 01       	movw	r18, r22
 556:	ac 01       	movw	r20, r24
 558:	c5 01       	movw	r24, r10
 55a:	b4 01       	movw	r22, r8
 55c:	0e 94 12 05 	call	0xa24	; 0xa24 <__subsf3>
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	48 ec       	ldi	r20, 0xC8	; 200
 566:	52 e4       	ldi	r21, 0x42	; 66
 568:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__mulsf3>
 56c:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixunssfsi>
 570:	cb 01       	movw	r24, r22
}
 572:	ff 90       	pop	r15
 574:	ef 90       	pop	r14
 576:	df 90       	pop	r13
 578:	cf 90       	pop	r12
 57a:	bf 90       	pop	r11
 57c:	af 90       	pop	r10
 57e:	9f 90       	pop	r9
 580:	8f 90       	pop	r8
	fractionTemp = floatNum - intPart;
	fractionPart = fractionTemp * 100;

	Lcd_DisplayNum(intPart);
	Lcd_DisplayChr('.');
	Lcd_DisplayNum(fractionPart);
 582:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <Lcd_DisplayNum>

00000586 <DC_Motor_Init>:
 */

#include "DC_Motor.h"

void DC_Motor_Init() {
	Dio_ConfigChannel(DIO_PORTC, DIO_PIN6, OUTPUT);
 586:	41 e0       	ldi	r20, 0x01	; 1
 588:	66 e0       	ldi	r22, 0x06	; 6
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	0e 94 7c 00 	call	0xf8	; 0xf8 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTC, DIO_PIN7, OUTPUT);
 590:	41 e0       	ldi	r20, 0x01	; 1
 592:	67 e0       	ldi	r22, 0x07	; 7
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <Dio_ConfigChannel>

0000059a <DC_Motor_Forward>:
}
void DC_Motor_Forward() {
	Dio_WriteChannel(DIO_PORTC, DIO_PIN6, STD_HIGH);
 59a:	41 e0       	ldi	r20, 0x01	; 1
 59c:	66 e0       	ldi	r22, 0x06	; 6
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	Dio_WriteChannel(DIO_PORTC, DIO_PIN7, STD_HIGH);
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	67 e0       	ldi	r22, 0x07	; 7
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	0c 94 c0 00 	jmp	0x180	; 0x180 <Dio_WriteChannel>

000005ae <DC_Motor_Stop>:
}
void DC_Motor_Stop() {
	Dio_WriteChannel(DIO_PORTC, DIO_PIN6, STD_LOW);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	66 e0       	ldi	r22, 0x06	; 6
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	Dio_WriteChannel(DIO_PORTC, DIO_PIN7, STD_LOW);
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	67 e0       	ldi	r22, 0x07	; 7
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	0c 94 c0 00 	jmp	0x180	; 0x180 <Dio_WriteChannel>

000005c2 <DC_Motor_CW>:
}
void DC_Motor_CW() {
	Dio_WriteChannel(DIO_PORTC, DIO_PIN6, STD_LOW);
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	66 e0       	ldi	r22, 0x06	; 6
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	Dio_WriteChannel(DIO_PORTC, DIO_PIN7, STD_HIGH);
 5cc:	41 e0       	ldi	r20, 0x01	; 1
 5ce:	67 e0       	ldi	r22, 0x07	; 7
 5d0:	82 e0       	ldi	r24, 0x02	; 2
 5d2:	0c 94 c0 00 	jmp	0x180	; 0x180 <Dio_WriteChannel>

000005d6 <DC_Motor_ACW>:
}
void DC_Motor_ACW() {
	Dio_WriteChannel(DIO_PORTC, DIO_PIN7, STD_LOW);
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	67 e0       	ldi	r22, 0x07	; 7
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	0e 94 c0 00 	call	0x180	; 0x180 <Dio_WriteChannel>
	Dio_WriteChannel(DIO_PORTC, DIO_PIN6, STD_HIGH);
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	66 e0       	ldi	r22, 0x06	; 6
 5e4:	82 e0       	ldi	r24, 0x02	; 2
 5e6:	0c 94 c0 00 	jmp	0x180	; 0x180 <Dio_WriteChannel>

000005ea <__vector_9>:
#include "Servo.h"
#include "DC_Motor.h"

u8 TimerOverflow = 0;

ISR(TIMER1_OVF_vect) {
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	8f 93       	push	r24
	TimerOverflow++; /* Increment Timer Overflow count */
 5f6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 5fa:	8f 5f       	subi	r24, 0xFF	; 255
 5fc:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__data_end>
}
 600:	8f 91       	pop	r24
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <main>:

int main(void) {

	double distance = 00.00;

	PORTD = 0xFF;
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	82 bb       	out	0x12, r24	; 18
	Servo_Init();
 610:	0e 94 96 01 	call	0x32c	; 0x32c <Servo_Init>
	Lcd_Init();
 614:	0e 94 df 01 	call	0x3be	; 0x3be <Lcd_Init>
	Lcd_Cmd(_LCD_CLEAR);
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61e:	2f ef       	ldi	r18, 0xFF	; 255
 620:	83 ed       	ldi	r24, 0xD3	; 211
 622:	90 e3       	ldi	r25, 0x30	; 48
 624:	21 50       	subi	r18, 0x01	; 1
 626:	80 40       	sbci	r24, 0x00	; 0
 628:	90 40       	sbci	r25, 0x00	; 0
 62a:	e1 f7       	brne	.-8      	; 0x624 <main+0x18>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0x22>
 62e:	00 00       	nop
	_delay_ms(1000);
	Glbl_Interrupt_Enable();
 630:	0e 94 74 00 	call	0xe8	; 0xe8 <Glbl_Interrupt_Enable>
	UltraSonic_Init();
 634:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UltraSonic_Init>
	DC_Motor_Init();
 638:	0e 94 c3 02 	call	0x586	; 0x586 <DC_Motor_Init>
	u8 Current_case = 0;
	u8 Duty = 20;
	DC_Motor_Forward();
 63c:	0e 94 cd 02 	call	0x59a	; 0x59a <DC_Motor_Forward>
	_delay_ms(1000);
	Glbl_Interrupt_Enable();
	UltraSonic_Init();
	DC_Motor_Init();
	u8 Current_case = 0;
	u8 Duty = 20;
 640:	c4 e1       	ldi	r28, 0x14	; 20
	Lcd_Cmd(_LCD_CLEAR);
	_delay_ms(1000);
	Glbl_Interrupt_Enable();
	UltraSonic_Init();
	DC_Motor_Init();
	u8 Current_case = 0;
 642:	d0 e0       	ldi	r29, 0x00	; 0
	TimerOverflow++; /* Increment Timer Overflow count */
}

int main(void) {

	double distance = 00.00;
 644:	c1 2c       	mov	r12, r1
 646:	d1 2c       	mov	r13, r1
 648:	76 01       	movw	r14, r12
	DC_Motor_Init();
	u8 Current_case = 0;
	u8 Duty = 20;
	DC_Motor_Forward();
	while (1) {
		switch (Current_case) {
 64a:	d2 30       	cpi	r29, 0x02	; 2
 64c:	39 f0       	breq	.+14     	; 0x65c <main+0x50>
 64e:	d3 30       	cpi	r29, 0x03	; 3
 650:	09 f4       	brne	.+2      	; 0x654 <main+0x48>
 652:	34 c1       	rjmp	.+616    	; 0x8bc <__stack+0x5d>
 654:	d1 30       	cpi	r29, 0x01	; 1
 656:	09 f0       	breq	.+2      	; 0x65a <main+0x4e>
 658:	a5 c1       	rjmp	.+842    	; 0x9a4 <__stack+0x145>
 65a:	02 c0       	rjmp	.+4      	; 0x660 <main+0x54>
 65c:	c4 e1       	ldi	r28, 0x14	; 20
 65e:	98 c0       	rjmp	.+304    	; 0x790 <main+0x184>
				if (distance > 10) {
					DC_Motor_Stop();
					Lcd_Cmd(_LCD_CLEAR);
					Lcd_Goto_Row_Column(0, 0);
					Lcd_DisplayStr("Prepare for GoTo Gap");
					Current_case = 0;
 660:	d1 e0       	ldi	r29, 0x01	; 1
	u8 Duty = 20;
	DC_Motor_Forward();
	while (1) {
		switch (Current_case) {
		case 1:
			while (distance <= 10 && Duty != 45) {
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	40 e2       	ldi	r20, 0x20	; 32
 668:	51 e4       	ldi	r21, 0x41	; 65
 66a:	c7 01       	movw	r24, r14
 66c:	b6 01       	movw	r22, r12
 66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 672:	18 16       	cp	r1, r24
 674:	54 f3       	brlt	.-44     	; 0x64a <main+0x3e>
 676:	cd 32       	cpi	r28, 0x2D	; 45
 678:	41 f3       	breq	.-48     	; 0x64a <main+0x3e>
				DC_Motor_Stop();
 67a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DC_Motor_Stop>
				Lcd_Cmd(_LCD_CLEAR);
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
				Lcd_Goto_Row_Column(0, 0);
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
				Lcd_DisplayStr("Check Left Gap");
 68c:	80 e6       	ldi	r24, 0x60	; 96
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
				Servo_Angle(Duty);
 694:	8c 2f       	mov	r24, r28
 696:	0e 94 98 01 	call	0x330	; 0x330 <Servo_Angle>
				Duty += 5;
 69a:	cb 5f       	subi	r28, 0xFB	; 251
				Trigger_UltraSonic();
 69c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
				distance = Echo_UltraSonic(TimerOverflow);
 6a0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 6a4:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 6a8:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 6ac:	6b 01       	movw	r12, r22
 6ae:	7c 01       	movw	r14, r24
 6b0:	2f ef       	ldi	r18, 0xFF	; 255
 6b2:	83 ed       	ldi	r24, 0xD3	; 211
 6b4:	90 e3       	ldi	r25, 0x30	; 48
 6b6:	21 50       	subi	r18, 0x01	; 1
 6b8:	80 40       	sbci	r24, 0x00	; 0
 6ba:	90 40       	sbci	r25, 0x00	; 0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <main+0xaa>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <main+0xb4>
 6c0:	00 00       	nop
				_delay_ms(1000);
				if (distance <= 10) {
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	40 e2       	ldi	r20, 0x20	; 32
 6c8:	51 e4       	ldi	r21, 0x41	; 65
 6ca:	c7 01       	movw	r24, r14
 6cc:	b6 01       	movw	r22, r12
 6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 6d2:	18 16       	cp	r1, r24
 6d4:	0c f0       	brlt	.+2      	; 0x6d8 <main+0xcc>
					Current_case = 2;
 6d6:	d2 e0       	ldi	r29, 0x02	; 2
				}
				if (distance > 10) {
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	40 e2       	ldi	r20, 0x20	; 32
 6de:	51 e4       	ldi	r21, 0x41	; 65
 6e0:	c7 01       	movw	r24, r14
 6e2:	b6 01       	movw	r22, r12
 6e4:	0e 94 d7 06 	call	0xdae	; 0xdae <__gesf2>
 6e8:	18 16       	cp	r1, r24
 6ea:	0c f0       	brlt	.+2      	; 0x6ee <main+0xe2>
 6ec:	ba cf       	rjmp	.-140    	; 0x662 <main+0x56>
					DC_Motor_Stop();
 6ee:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DC_Motor_Stop>
					Lcd_Cmd(_LCD_CLEAR);
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
					Lcd_Goto_Row_Column(0, 0);
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
					Lcd_DisplayStr("Prepare for GoTo Gap");
 700:	8f e6       	ldi	r24, 0x6F	; 111
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
					Current_case = 0;
					Servo_Angle(20);
 708:	84 e1       	ldi	r24, 0x14	; 20
 70a:	0e 94 98 01 	call	0x330	; 0x330 <Servo_Angle>
 70e:	2f ef       	ldi	r18, 0xFF	; 255
 710:	83 ed       	ldi	r24, 0xD3	; 211
 712:	90 e3       	ldi	r25, 0x30	; 48
 714:	21 50       	subi	r18, 0x01	; 1
 716:	80 40       	sbci	r24, 0x00	; 0
 718:	90 40       	sbci	r25, 0x00	; 0
 71a:	e1 f7       	brne	.-8      	; 0x714 <main+0x108>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <main+0x112>
 71e:	00 00       	nop
					_delay_ms(1000);
					Trigger_UltraSonic();
 720:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
					distance = Echo_UltraSonic(TimerOverflow);
 724:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 728:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 72c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 730:	6b 01       	movw	r12, r22
 732:	7c 01       	movw	r14, r24
					while (distance <= 10) {
 734:	20 e0       	ldi	r18, 0x00	; 0
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	40 e2       	ldi	r20, 0x20	; 32
 73a:	51 e4       	ldi	r21, 0x41	; 65
 73c:	c7 01       	movw	r24, r14
 73e:	b6 01       	movw	r22, r12
 740:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 744:	18 16       	cp	r1, r24
 746:	0c f1       	brlt	.+66     	; 0x78a <main+0x17e>
						DC_Motor_CW();
 748:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <DC_Motor_CW>
						Lcd_Cmd(_LCD_CLEAR);
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
						Lcd_Goto_Row_Column(0, 0);
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
						Lcd_DisplayStr("Turn Left");
 75a:	84 e8       	ldi	r24, 0x84	; 132
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
						Trigger_UltraSonic();
 762:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
						distance = Echo_UltraSonic(TimerOverflow);
 766:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 76a:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 76e:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 772:	6b 01       	movw	r12, r22
 774:	7c 01       	movw	r14, r24
 776:	2f ef       	ldi	r18, 0xFF	; 255
 778:	83 ed       	ldi	r24, 0xD3	; 211
 77a:	90 e3       	ldi	r25, 0x30	; 48
 77c:	21 50       	subi	r18, 0x01	; 1
 77e:	80 40       	sbci	r24, 0x00	; 0
 780:	90 40       	sbci	r25, 0x00	; 0
 782:	e1 f7       	brne	.-8      	; 0x77c <main+0x170>
 784:	00 c0       	rjmp	.+0      	; 0x786 <main+0x17a>
 786:	00 00       	nop
 788:	d5 cf       	rjmp	.-86     	; 0x734 <main+0x128>
				if (distance > 10) {
					DC_Motor_Stop();
					Lcd_Cmd(_LCD_CLEAR);
					Lcd_Goto_Row_Column(0, 0);
					Lcd_DisplayStr("Prepare for GoTo Gap");
					Current_case = 0;
 78a:	d0 e0       	ldi	r29, 0x00	; 0
 78c:	6a cf       	rjmp	.-300    	; 0x662 <main+0x56>
				if (distance > 10) {
					DC_Motor_Stop();
					Lcd_Cmd(_LCD_CLEAR);
					Lcd_Goto_Row_Column(0, 0);
					Lcd_DisplayStr("Prepare for GoTo Gap");
					Current_case = 0;
 78e:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
			break;
		case 2:
			Duty = 20;
			while (distance < 10 && Duty >= 1) {
 790:	20 e0       	ldi	r18, 0x00	; 0
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	40 e2       	ldi	r20, 0x20	; 32
 796:	51 e4       	ldi	r21, 0x41	; 65
 798:	c7 01       	movw	r24, r14
 79a:	b6 01       	movw	r22, r12
 79c:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 7a0:	87 ff       	sbrs	r24, 7
 7a2:	53 cf       	rjmp	.-346    	; 0x64a <main+0x3e>
 7a4:	cc 23       	and	r28, r28
 7a6:	09 f4       	brne	.+2      	; 0x7aa <main+0x19e>
 7a8:	50 cf       	rjmp	.-352    	; 0x64a <main+0x3e>
				DC_Motor_Stop();
 7aa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DC_Motor_Stop>
				Lcd_Cmd(_LCD_CLEAR);
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
				Lcd_Goto_Row_Column(0, 0);
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
				Lcd_DisplayStr("Check Right Gap");
 7bc:	8e e8       	ldi	r24, 0x8E	; 142
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
				Servo_Angle(Duty);
 7c4:	8c 2f       	mov	r24, r28
 7c6:	0e 94 98 01 	call	0x330	; 0x330 <Servo_Angle>
				Duty -= 5;
 7ca:	c5 50       	subi	r28, 0x05	; 5
				Trigger_UltraSonic();
 7cc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
				distance = Echo_UltraSonic(TimerOverflow);
 7d0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 7d4:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 7d8:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 7dc:	6b 01       	movw	r12, r22
 7de:	7c 01       	movw	r14, r24
 7e0:	2f ef       	ldi	r18, 0xFF	; 255
 7e2:	83 ed       	ldi	r24, 0xD3	; 211
 7e4:	90 e3       	ldi	r25, 0x30	; 48
 7e6:	21 50       	subi	r18, 0x01	; 1
 7e8:	80 40       	sbci	r24, 0x00	; 0
 7ea:	90 40       	sbci	r25, 0x00	; 0
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <main+0x1da>
 7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <main+0x1e4>
 7f0:	00 00       	nop
				_delay_ms(1000);
				if (distance <= 10) {
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	40 e2       	ldi	r20, 0x20	; 32
 7f8:	51 e4       	ldi	r21, 0x41	; 65
 7fa:	c7 01       	movw	r24, r14
 7fc:	b6 01       	movw	r22, r12
 7fe:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 802:	18 16       	cp	r1, r24
 804:	0c f0       	brlt	.+2      	; 0x808 <main+0x1fc>
					Current_case = 3;
 806:	d3 e0       	ldi	r29, 0x03	; 3
				}
				if (distance > 10) {
 808:	20 e0       	ldi	r18, 0x00	; 0
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	40 e2       	ldi	r20, 0x20	; 32
 80e:	51 e4       	ldi	r21, 0x41	; 65
 810:	c7 01       	movw	r24, r14
 812:	b6 01       	movw	r22, r12
 814:	0e 94 d7 06 	call	0xdae	; 0xdae <__gesf2>
 818:	18 16       	cp	r1, r24
 81a:	0c f0       	brlt	.+2      	; 0x81e <main+0x212>
 81c:	b9 cf       	rjmp	.-142    	; 0x790 <main+0x184>
					DC_Motor_Stop();
 81e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DC_Motor_Stop>
					Lcd_Cmd(_LCD_CLEAR);
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
					Lcd_Goto_Row_Column(0, 0);
 828:	60 e0       	ldi	r22, 0x00	; 0
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
					Lcd_DisplayStr("Prepare for GoTo Gap");
 830:	8f e6       	ldi	r24, 0x6F	; 111
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
					Current_case = 0;
					Servo_Angle(20);
 838:	84 e1       	ldi	r24, 0x14	; 20
 83a:	0e 94 98 01 	call	0x330	; 0x330 <Servo_Angle>
 83e:	2f ef       	ldi	r18, 0xFF	; 255
 840:	83 ed       	ldi	r24, 0xD3	; 211
 842:	90 e3       	ldi	r25, 0x30	; 48
 844:	21 50       	subi	r18, 0x01	; 1
 846:	80 40       	sbci	r24, 0x00	; 0
 848:	90 40       	sbci	r25, 0x00	; 0
 84a:	e1 f7       	brne	.-8      	; 0x844 <main+0x238>
 84c:	00 c0       	rjmp	.+0      	; 0x84e <main+0x242>
 84e:	00 00       	nop
					_delay_ms(1000);
					Trigger_UltraSonic();
 850:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
					distance = Echo_UltraSonic(TimerOverflow);
 854:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 858:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 85c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 860:	6b 01       	movw	r12, r22
 862:	7c 01       	movw	r14, r24
					while (distance <= 10) {
 864:	20 e0       	ldi	r18, 0x00	; 0
 866:	30 e0       	ldi	r19, 0x00	; 0
 868:	40 e2       	ldi	r20, 0x20	; 32
 86a:	51 e4       	ldi	r21, 0x41	; 65
 86c:	c7 01       	movw	r24, r14
 86e:	b6 01       	movw	r22, r12
 870:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 874:	18 16       	cp	r1, r24
 876:	0c f4       	brge	.+2      	; 0x87a <__stack+0x1b>
 878:	8a cf       	rjmp	.-236    	; 0x78e <main+0x182>
						DC_Motor_ACW();
 87a:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DC_Motor_ACW>
						Lcd_Cmd(_LCD_CLEAR);
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
						Lcd_Goto_Row_Column(0, 0);
 884:	60 e0       	ldi	r22, 0x00	; 0
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
						Lcd_DisplayStr("Turn Right");
 88c:	8e e9       	ldi	r24, 0x9E	; 158
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
						Trigger_UltraSonic();
 894:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
						distance = Echo_UltraSonic(TimerOverflow);
 898:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 89c:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 8a0:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 8a4:	6b 01       	movw	r12, r22
 8a6:	7c 01       	movw	r14, r24
 8a8:	2f ef       	ldi	r18, 0xFF	; 255
 8aa:	83 ed       	ldi	r24, 0xD3	; 211
 8ac:	90 e3       	ldi	r25, 0x30	; 48
 8ae:	21 50       	subi	r18, 0x01	; 1
 8b0:	80 40       	sbci	r24, 0x00	; 0
 8b2:	90 40       	sbci	r25, 0x00	; 0
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <__stack+0x4f>
 8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
 8b8:	00 00       	nop
 8ba:	d4 cf       	rjmp	.-88     	; 0x864 <__stack+0x5>
				}

			}
			break;
		case 3:
			while (distance <= 10) {
 8bc:	20 e0       	ldi	r18, 0x00	; 0
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	40 e2       	ldi	r20, 0x20	; 32
 8c2:	51 e4       	ldi	r21, 0x41	; 65
 8c4:	c7 01       	movw	r24, r14
 8c6:	b6 01       	movw	r22, r12
 8c8:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 8cc:	18 16       	cp	r1, r24
 8ce:	0c f1       	brlt	.+66     	; 0x912 <__stack+0xb3>
				DC_Motor_ACW();
 8d0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DC_Motor_ACW>
				Lcd_Cmd(_LCD_CLEAR);
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
				Lcd_Goto_Row_Column(0, 0);
 8da:	60 e0       	ldi	r22, 0x00	; 0
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
				Lcd_DisplayStr("Turn And Check Any Gap");
 8e2:	89 ea       	ldi	r24, 0xA9	; 169
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
				Trigger_UltraSonic();
 8ea:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
				distance = Echo_UltraSonic(TimerOverflow);
 8ee:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 8f2:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 8f6:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 8fa:	6b 01       	movw	r12, r22
 8fc:	7c 01       	movw	r14, r24
 8fe:	2f ef       	ldi	r18, 0xFF	; 255
 900:	83 ed       	ldi	r24, 0xD3	; 211
 902:	90 e3       	ldi	r25, 0x30	; 48
 904:	21 50       	subi	r18, 0x01	; 1
 906:	80 40       	sbci	r24, 0x00	; 0
 908:	90 40       	sbci	r25, 0x00	; 0
 90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0xa5>
 90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xaf>
 90e:	00 00       	nop
 910:	d5 cf       	rjmp	.-86     	; 0x8bc <__stack+0x5d>
				_delay_ms(1000);
			}
			while(distance > 10){
 912:	20 e0       	ldi	r18, 0x00	; 0
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	40 e2       	ldi	r20, 0x20	; 32
 918:	51 e4       	ldi	r21, 0x41	; 65
 91a:	c7 01       	movw	r24, r14
 91c:	b6 01       	movw	r22, r12
 91e:	0e 94 d7 06 	call	0xdae	; 0xdae <__gesf2>
 922:	18 16       	cp	r1, r24
 924:	0c f0       	brlt	.+2      	; 0x928 <__stack+0xc9>
 926:	91 ce       	rjmp	.-734    	; 0x64a <main+0x3e>
				DC_Motor_Stop();
 928:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DC_Motor_Stop>
				Lcd_Cmd(_LCD_CLEAR);
 92c:	81 e0       	ldi	r24, 0x01	; 1
 92e:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
				Lcd_Goto_Row_Column(0, 0);
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
				Lcd_DisplayStr("Prepare for GoTo Gap");
 93a:	8f e6       	ldi	r24, 0x6F	; 111
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
				DC_Motor_Stop();
 942:	0e 94 d7 02 	call	0x5ae	; 0x5ae <DC_Motor_Stop>
				Current_case = 0;
				Servo_Angle(20);
 946:	84 e1       	ldi	r24, 0x14	; 20
 948:	0e 94 98 01 	call	0x330	; 0x330 <Servo_Angle>
 94c:	2f ef       	ldi	r18, 0xFF	; 255
 94e:	83 ed       	ldi	r24, 0xD3	; 211
 950:	90 e3       	ldi	r25, 0x30	; 48
 952:	21 50       	subi	r18, 0x01	; 1
 954:	80 40       	sbci	r24, 0x00	; 0
 956:	90 40       	sbci	r25, 0x00	; 0
 958:	e1 f7       	brne	.-8      	; 0x952 <__stack+0xf3>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <__stack+0xfd>
 95c:	00 00       	nop
				DC_Motor_Stop();
				Lcd_Cmd(_LCD_CLEAR);
				Lcd_Goto_Row_Column(0, 0);
				Lcd_DisplayStr("Prepare for GoTo Gap");
				DC_Motor_Stop();
				Current_case = 0;
 95e:	d0 e0       	ldi	r29, 0x00	; 0
				Servo_Angle(20);
				_delay_ms(1000);
				while(distance <= 10){
 960:	20 e0       	ldi	r18, 0x00	; 0
 962:	30 e0       	ldi	r19, 0x00	; 0
 964:	40 e2       	ldi	r20, 0x20	; 32
 966:	51 e4       	ldi	r21, 0x41	; 65
 968:	c7 01       	movw	r24, r14
 96a:	b6 01       	movw	r22, r12
 96c:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
 970:	18 16       	cp	r1, r24
 972:	7c f2       	brlt	.-98     	; 0x912 <__stack+0xb3>
					DC_Motor_ACW();
 974:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DC_Motor_ACW>
					Lcd_Cmd(_LCD_CLEAR);
 978:	81 e0       	ldi	r24, 0x01	; 1
 97a:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
					Lcd_Goto_Row_Column(0, 0);
 97e:	60 e0       	ldi	r22, 0x00	; 0
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
					Lcd_DisplayStr("Trun Right");
 986:	80 ec       	ldi	r24, 0xC0	; 192
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
					Trigger_UltraSonic();
 98e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
					distance = Echo_UltraSonic(TimerOverflow);
 992:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 996:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 99a:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 99e:	6b 01       	movw	r12, r22
 9a0:	7c 01       	movw	r14, r24
 9a2:	d4 cf       	rjmp	.-88     	; 0x94c <__stack+0xed>
				}
			}
			break;
		default:

			DC_Motor_Forward();
 9a4:	0e 94 cd 02 	call	0x59a	; 0x59a <DC_Motor_Forward>
			Lcd_Cmd(_LCD_CLEAR);
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	0e 94 c7 01 	call	0x38e	; 0x38e <Lcd_Cmd>
			Lcd_Goto_Row_Column(0, 0);
 9ae:	60 e0       	ldi	r22, 0x00	; 0
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <Lcd_Goto_Row_Column>
			Lcd_DisplayStr("Go Forward");
 9b6:	8b ec       	ldi	r24, 0xCB	; 203
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 55 02 	call	0x4aa	; 0x4aa <Lcd_DisplayStr>
			while (distance > 10) {
 9be:	20 e0       	ldi	r18, 0x00	; 0
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	40 e2       	ldi	r20, 0x20	; 32
 9c4:	51 e4       	ldi	r21, 0x41	; 65
 9c6:	c7 01       	movw	r24, r14
 9c8:	b6 01       	movw	r22, r12
 9ca:	0e 94 d7 06 	call	0xdae	; 0xdae <__gesf2>
 9ce:	18 16       	cp	r1, r24
 9d0:	0c f0       	brlt	.+2      	; 0x9d4 <__stack+0x175>
 9d2:	46 ce       	rjmp	.-884    	; 0x660 <main+0x54>
				Trigger_UltraSonic();
 9d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Trigger_UltraSonic>
				distance = Echo_UltraSonic(TimerOverflow);
 9d8:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__data_end>
 9dc:	0e 94 89 01 	call	0x312	; 0x312 <Echo_UltraSonic>
 9e0:	0e 94 25 06 	call	0xc4a	; 0xc4a <__floatunsisf>
 9e4:	6b 01       	movw	r12, r22
 9e6:	7c 01       	movw	r14, r24
 9e8:	2f ef       	ldi	r18, 0xFF	; 255
 9ea:	83 ed       	ldi	r24, 0xD3	; 211
 9ec:	90 e3       	ldi	r25, 0x30	; 48
 9ee:	21 50       	subi	r18, 0x01	; 1
 9f0:	80 40       	sbci	r24, 0x00	; 0
 9f2:	90 40       	sbci	r25, 0x00	; 0
 9f4:	e1 f7       	brne	.-8      	; 0x9ee <__stack+0x18f>
 9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <__stack+0x199>
 9f8:	00 00       	nop
 9fa:	e1 cf       	rjmp	.-62     	; 0x9be <__stack+0x15f>

000009fc <__udivmodhi4>:
 9fc:	aa 1b       	sub	r26, r26
 9fe:	bb 1b       	sub	r27, r27
 a00:	51 e1       	ldi	r21, 0x11	; 17
 a02:	07 c0       	rjmp	.+14     	; 0xa12 <__udivmodhi4_ep>

00000a04 <__udivmodhi4_loop>:
 a04:	aa 1f       	adc	r26, r26
 a06:	bb 1f       	adc	r27, r27
 a08:	a6 17       	cp	r26, r22
 a0a:	b7 07       	cpc	r27, r23
 a0c:	10 f0       	brcs	.+4      	; 0xa12 <__udivmodhi4_ep>
 a0e:	a6 1b       	sub	r26, r22
 a10:	b7 0b       	sbc	r27, r23

00000a12 <__udivmodhi4_ep>:
 a12:	88 1f       	adc	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	5a 95       	dec	r21
 a18:	a9 f7       	brne	.-22     	; 0xa04 <__udivmodhi4_loop>
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	bc 01       	movw	r22, r24
 a20:	cd 01       	movw	r24, r26
 a22:	08 95       	ret

00000a24 <__subsf3>:
 a24:	50 58       	subi	r21, 0x80	; 128

00000a26 <__addsf3>:
 a26:	bb 27       	eor	r27, r27
 a28:	aa 27       	eor	r26, r26
 a2a:	0e 94 2a 05 	call	0xa54	; 0xa54 <__addsf3x>
 a2e:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>
 a32:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_pscA>
 a36:	38 f0       	brcs	.+14     	; 0xa46 <__addsf3+0x20>
 a38:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscB>
 a3c:	20 f0       	brcs	.+8      	; 0xa46 <__addsf3+0x20>
 a3e:	39 f4       	brne	.+14     	; 0xa4e <__addsf3+0x28>
 a40:	9f 3f       	cpi	r25, 0xFF	; 255
 a42:	19 f4       	brne	.+6      	; 0xa4a <__addsf3+0x24>
 a44:	26 f4       	brtc	.+8      	; 0xa4e <__addsf3+0x28>
 a46:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_nan>
 a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3+0x28>
 a4c:	e0 95       	com	r30
 a4e:	e7 fb       	bst	r30, 7
 a50:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>

00000a54 <__addsf3x>:
 a54:	e9 2f       	mov	r30, r25
 a56:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 a5a:	58 f3       	brcs	.-42     	; 0xa32 <__addsf3+0xc>
 a5c:	ba 17       	cp	r27, r26
 a5e:	62 07       	cpc	r22, r18
 a60:	73 07       	cpc	r23, r19
 a62:	84 07       	cpc	r24, r20
 a64:	95 07       	cpc	r25, r21
 a66:	20 f0       	brcs	.+8      	; 0xa70 <__addsf3x+0x1c>
 a68:	79 f4       	brne	.+30     	; 0xa88 <__addsf3x+0x34>
 a6a:	a6 f5       	brtc	.+104    	; 0xad4 <__addsf3x+0x80>
 a6c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_zero>
 a70:	0e f4       	brtc	.+2      	; 0xa74 <__addsf3x+0x20>
 a72:	e0 95       	com	r30
 a74:	0b 2e       	mov	r0, r27
 a76:	ba 2f       	mov	r27, r26
 a78:	a0 2d       	mov	r26, r0
 a7a:	0b 01       	movw	r0, r22
 a7c:	b9 01       	movw	r22, r18
 a7e:	90 01       	movw	r18, r0
 a80:	0c 01       	movw	r0, r24
 a82:	ca 01       	movw	r24, r20
 a84:	a0 01       	movw	r20, r0
 a86:	11 24       	eor	r1, r1
 a88:	ff 27       	eor	r31, r31
 a8a:	59 1b       	sub	r21, r25
 a8c:	99 f0       	breq	.+38     	; 0xab4 <__addsf3x+0x60>
 a8e:	59 3f       	cpi	r21, 0xF9	; 249
 a90:	50 f4       	brcc	.+20     	; 0xaa6 <__addsf3x+0x52>
 a92:	50 3e       	cpi	r21, 0xE0	; 224
 a94:	68 f1       	brcs	.+90     	; 0xaf0 <__addsf3x+0x9c>
 a96:	1a 16       	cp	r1, r26
 a98:	f0 40       	sbci	r31, 0x00	; 0
 a9a:	a2 2f       	mov	r26, r18
 a9c:	23 2f       	mov	r18, r19
 a9e:	34 2f       	mov	r19, r20
 aa0:	44 27       	eor	r20, r20
 aa2:	58 5f       	subi	r21, 0xF8	; 248
 aa4:	f3 cf       	rjmp	.-26     	; 0xa8c <__addsf3x+0x38>
 aa6:	46 95       	lsr	r20
 aa8:	37 95       	ror	r19
 aaa:	27 95       	ror	r18
 aac:	a7 95       	ror	r26
 aae:	f0 40       	sbci	r31, 0x00	; 0
 ab0:	53 95       	inc	r21
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__addsf3x+0x52>
 ab4:	7e f4       	brtc	.+30     	; 0xad4 <__addsf3x+0x80>
 ab6:	1f 16       	cp	r1, r31
 ab8:	ba 0b       	sbc	r27, r26
 aba:	62 0b       	sbc	r22, r18
 abc:	73 0b       	sbc	r23, r19
 abe:	84 0b       	sbc	r24, r20
 ac0:	ba f0       	brmi	.+46     	; 0xaf0 <__addsf3x+0x9c>
 ac2:	91 50       	subi	r25, 0x01	; 1
 ac4:	a1 f0       	breq	.+40     	; 0xaee <__addsf3x+0x9a>
 ac6:	ff 0f       	add	r31, r31
 ac8:	bb 1f       	adc	r27, r27
 aca:	66 1f       	adc	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	c2 f7       	brpl	.-16     	; 0xac2 <__addsf3x+0x6e>
 ad2:	0e c0       	rjmp	.+28     	; 0xaf0 <__addsf3x+0x9c>
 ad4:	ba 0f       	add	r27, r26
 ad6:	62 1f       	adc	r22, r18
 ad8:	73 1f       	adc	r23, r19
 ada:	84 1f       	adc	r24, r20
 adc:	48 f4       	brcc	.+18     	; 0xaf0 <__addsf3x+0x9c>
 ade:	87 95       	ror	r24
 ae0:	77 95       	ror	r23
 ae2:	67 95       	ror	r22
 ae4:	b7 95       	ror	r27
 ae6:	f7 95       	ror	r31
 ae8:	9e 3f       	cpi	r25, 0xFE	; 254
 aea:	08 f0       	brcs	.+2      	; 0xaee <__addsf3x+0x9a>
 aec:	b0 cf       	rjmp	.-160    	; 0xa4e <__addsf3+0x28>
 aee:	93 95       	inc	r25
 af0:	88 0f       	add	r24, r24
 af2:	08 f0       	brcs	.+2      	; 0xaf6 <__addsf3x+0xa2>
 af4:	99 27       	eor	r25, r25
 af6:	ee 0f       	add	r30, r30
 af8:	97 95       	ror	r25
 afa:	87 95       	ror	r24
 afc:	08 95       	ret

00000afe <__cmpsf2>:
 afe:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_cmp>
 b02:	08 f4       	brcc	.+2      	; 0xb06 <__cmpsf2+0x8>
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	08 95       	ret

00000b08 <__divsf3>:
 b08:	0e 94 98 05 	call	0xb30	; 0xb30 <__divsf3x>
 b0c:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>
 b10:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscB>
 b14:	58 f0       	brcs	.+22     	; 0xb2c <__divsf3+0x24>
 b16:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_pscA>
 b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0x24>
 b1c:	29 f4       	brne	.+10     	; 0xb28 <__divsf3+0x20>
 b1e:	5f 3f       	cpi	r21, 0xFF	; 255
 b20:	29 f0       	breq	.+10     	; 0xb2c <__divsf3+0x24>
 b22:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 b26:	51 11       	cpse	r21, r1
 b28:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 b2c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_nan>

00000b30 <__divsf3x>:
 b30:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 b34:	68 f3       	brcs	.-38     	; 0xb10 <__divsf3+0x8>

00000b36 <__divsf3_pse>:
 b36:	99 23       	and	r25, r25
 b38:	b1 f3       	breq	.-20     	; 0xb26 <__divsf3+0x1e>
 b3a:	55 23       	and	r21, r21
 b3c:	91 f3       	breq	.-28     	; 0xb22 <__divsf3+0x1a>
 b3e:	95 1b       	sub	r25, r21
 b40:	55 0b       	sbc	r21, r21
 b42:	bb 27       	eor	r27, r27
 b44:	aa 27       	eor	r26, r26
 b46:	62 17       	cp	r22, r18
 b48:	73 07       	cpc	r23, r19
 b4a:	84 07       	cpc	r24, r20
 b4c:	38 f0       	brcs	.+14     	; 0xb5c <__divsf3_pse+0x26>
 b4e:	9f 5f       	subi	r25, 0xFF	; 255
 b50:	5f 4f       	sbci	r21, 0xFF	; 255
 b52:	22 0f       	add	r18, r18
 b54:	33 1f       	adc	r19, r19
 b56:	44 1f       	adc	r20, r20
 b58:	aa 1f       	adc	r26, r26
 b5a:	a9 f3       	breq	.-22     	; 0xb46 <__divsf3_pse+0x10>
 b5c:	35 d0       	rcall	.+106    	; 0xbc8 <__divsf3_pse+0x92>
 b5e:	0e 2e       	mov	r0, r30
 b60:	3a f0       	brmi	.+14     	; 0xb70 <__divsf3_pse+0x3a>
 b62:	e0 e8       	ldi	r30, 0x80	; 128
 b64:	32 d0       	rcall	.+100    	; 0xbca <__divsf3_pse+0x94>
 b66:	91 50       	subi	r25, 0x01	; 1
 b68:	50 40       	sbci	r21, 0x00	; 0
 b6a:	e6 95       	lsr	r30
 b6c:	00 1c       	adc	r0, r0
 b6e:	ca f7       	brpl	.-14     	; 0xb62 <__divsf3_pse+0x2c>
 b70:	2b d0       	rcall	.+86     	; 0xbc8 <__divsf3_pse+0x92>
 b72:	fe 2f       	mov	r31, r30
 b74:	29 d0       	rcall	.+82     	; 0xbc8 <__divsf3_pse+0x92>
 b76:	66 0f       	add	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	bb 1f       	adc	r27, r27
 b7e:	26 17       	cp	r18, r22
 b80:	37 07       	cpc	r19, r23
 b82:	48 07       	cpc	r20, r24
 b84:	ab 07       	cpc	r26, r27
 b86:	b0 e8       	ldi	r27, 0x80	; 128
 b88:	09 f0       	breq	.+2      	; 0xb8c <__divsf3_pse+0x56>
 b8a:	bb 0b       	sbc	r27, r27
 b8c:	80 2d       	mov	r24, r0
 b8e:	bf 01       	movw	r22, r30
 b90:	ff 27       	eor	r31, r31
 b92:	93 58       	subi	r25, 0x83	; 131
 b94:	5f 4f       	sbci	r21, 0xFF	; 255
 b96:	3a f0       	brmi	.+14     	; 0xba6 <__divsf3_pse+0x70>
 b98:	9e 3f       	cpi	r25, 0xFE	; 254
 b9a:	51 05       	cpc	r21, r1
 b9c:	78 f0       	brcs	.+30     	; 0xbbc <__divsf3_pse+0x86>
 b9e:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 ba2:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 ba6:	5f 3f       	cpi	r21, 0xFF	; 255
 ba8:	e4 f3       	brlt	.-8      	; 0xba2 <__divsf3_pse+0x6c>
 baa:	98 3e       	cpi	r25, 0xE8	; 232
 bac:	d4 f3       	brlt	.-12     	; 0xba2 <__divsf3_pse+0x6c>
 bae:	86 95       	lsr	r24
 bb0:	77 95       	ror	r23
 bb2:	67 95       	ror	r22
 bb4:	b7 95       	ror	r27
 bb6:	f7 95       	ror	r31
 bb8:	9f 5f       	subi	r25, 0xFF	; 255
 bba:	c9 f7       	brne	.-14     	; 0xbae <__divsf3_pse+0x78>
 bbc:	88 0f       	add	r24, r24
 bbe:	91 1d       	adc	r25, r1
 bc0:	96 95       	lsr	r25
 bc2:	87 95       	ror	r24
 bc4:	97 f9       	bld	r25, 7
 bc6:	08 95       	ret
 bc8:	e1 e0       	ldi	r30, 0x01	; 1
 bca:	66 0f       	add	r22, r22
 bcc:	77 1f       	adc	r23, r23
 bce:	88 1f       	adc	r24, r24
 bd0:	bb 1f       	adc	r27, r27
 bd2:	62 17       	cp	r22, r18
 bd4:	73 07       	cpc	r23, r19
 bd6:	84 07       	cpc	r24, r20
 bd8:	ba 07       	cpc	r27, r26
 bda:	20 f0       	brcs	.+8      	; 0xbe4 <__divsf3_pse+0xae>
 bdc:	62 1b       	sub	r22, r18
 bde:	73 0b       	sbc	r23, r19
 be0:	84 0b       	sbc	r24, r20
 be2:	ba 0b       	sbc	r27, r26
 be4:	ee 1f       	adc	r30, r30
 be6:	88 f7       	brcc	.-30     	; 0xbca <__divsf3_pse+0x94>
 be8:	e0 95       	com	r30
 bea:	08 95       	ret

00000bec <__fixunssfsi>:
 bec:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_splitA>
 bf0:	88 f0       	brcs	.+34     	; 0xc14 <__fixunssfsi+0x28>
 bf2:	9f 57       	subi	r25, 0x7F	; 127
 bf4:	98 f0       	brcs	.+38     	; 0xc1c <__fixunssfsi+0x30>
 bf6:	b9 2f       	mov	r27, r25
 bf8:	99 27       	eor	r25, r25
 bfa:	b7 51       	subi	r27, 0x17	; 23
 bfc:	b0 f0       	brcs	.+44     	; 0xc2a <__fixunssfsi+0x3e>
 bfe:	e1 f0       	breq	.+56     	; 0xc38 <__fixunssfsi+0x4c>
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	99 1f       	adc	r25, r25
 c08:	1a f0       	brmi	.+6      	; 0xc10 <__fixunssfsi+0x24>
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__fixunssfsi+0x14>
 c0e:	14 c0       	rjmp	.+40     	; 0xc38 <__fixunssfsi+0x4c>
 c10:	b1 30       	cpi	r27, 0x01	; 1
 c12:	91 f0       	breq	.+36     	; 0xc38 <__fixunssfsi+0x4c>
 c14:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_zero>
 c18:	b1 e0       	ldi	r27, 0x01	; 1
 c1a:	08 95       	ret
 c1c:	0c 94 d0 06 	jmp	0xda0	; 0xda0 <__fp_zero>
 c20:	67 2f       	mov	r22, r23
 c22:	78 2f       	mov	r23, r24
 c24:	88 27       	eor	r24, r24
 c26:	b8 5f       	subi	r27, 0xF8	; 248
 c28:	39 f0       	breq	.+14     	; 0xc38 <__fixunssfsi+0x4c>
 c2a:	b9 3f       	cpi	r27, 0xF9	; 249
 c2c:	cc f3       	brlt	.-14     	; 0xc20 <__fixunssfsi+0x34>
 c2e:	86 95       	lsr	r24
 c30:	77 95       	ror	r23
 c32:	67 95       	ror	r22
 c34:	b3 95       	inc	r27
 c36:	d9 f7       	brne	.-10     	; 0xc2e <__fixunssfsi+0x42>
 c38:	3e f4       	brtc	.+14     	; 0xc48 <__fixunssfsi+0x5c>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	08 95       	ret

00000c4a <__floatunsisf>:
 c4a:	e8 94       	clt
 c4c:	09 c0       	rjmp	.+18     	; 0xc60 <__floatsisf+0x12>

00000c4e <__floatsisf>:
 c4e:	97 fb       	bst	r25, 7
 c50:	3e f4       	brtc	.+14     	; 0xc60 <__floatsisf+0x12>
 c52:	90 95       	com	r25
 c54:	80 95       	com	r24
 c56:	70 95       	com	r23
 c58:	61 95       	neg	r22
 c5a:	7f 4f       	sbci	r23, 0xFF	; 255
 c5c:	8f 4f       	sbci	r24, 0xFF	; 255
 c5e:	9f 4f       	sbci	r25, 0xFF	; 255
 c60:	99 23       	and	r25, r25
 c62:	a9 f0       	breq	.+42     	; 0xc8e <__floatsisf+0x40>
 c64:	f9 2f       	mov	r31, r25
 c66:	96 e9       	ldi	r25, 0x96	; 150
 c68:	bb 27       	eor	r27, r27
 c6a:	93 95       	inc	r25
 c6c:	f6 95       	lsr	r31
 c6e:	87 95       	ror	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	b7 95       	ror	r27
 c76:	f1 11       	cpse	r31, r1
 c78:	f8 cf       	rjmp	.-16     	; 0xc6a <__floatsisf+0x1c>
 c7a:	fa f4       	brpl	.+62     	; 0xcba <__floatsisf+0x6c>
 c7c:	bb 0f       	add	r27, r27
 c7e:	11 f4       	brne	.+4      	; 0xc84 <__floatsisf+0x36>
 c80:	60 ff       	sbrs	r22, 0
 c82:	1b c0       	rjmp	.+54     	; 0xcba <__floatsisf+0x6c>
 c84:	6f 5f       	subi	r22, 0xFF	; 255
 c86:	7f 4f       	sbci	r23, 0xFF	; 255
 c88:	8f 4f       	sbci	r24, 0xFF	; 255
 c8a:	9f 4f       	sbci	r25, 0xFF	; 255
 c8c:	16 c0       	rjmp	.+44     	; 0xcba <__floatsisf+0x6c>
 c8e:	88 23       	and	r24, r24
 c90:	11 f0       	breq	.+4      	; 0xc96 <__floatsisf+0x48>
 c92:	96 e9       	ldi	r25, 0x96	; 150
 c94:	11 c0       	rjmp	.+34     	; 0xcb8 <__floatsisf+0x6a>
 c96:	77 23       	and	r23, r23
 c98:	21 f0       	breq	.+8      	; 0xca2 <__floatsisf+0x54>
 c9a:	9e e8       	ldi	r25, 0x8E	; 142
 c9c:	87 2f       	mov	r24, r23
 c9e:	76 2f       	mov	r23, r22
 ca0:	05 c0       	rjmp	.+10     	; 0xcac <__floatsisf+0x5e>
 ca2:	66 23       	and	r22, r22
 ca4:	71 f0       	breq	.+28     	; 0xcc2 <__floatsisf+0x74>
 ca6:	96 e8       	ldi	r25, 0x86	; 134
 ca8:	86 2f       	mov	r24, r22
 caa:	70 e0       	ldi	r23, 0x00	; 0
 cac:	60 e0       	ldi	r22, 0x00	; 0
 cae:	2a f0       	brmi	.+10     	; 0xcba <__floatsisf+0x6c>
 cb0:	9a 95       	dec	r25
 cb2:	66 0f       	add	r22, r22
 cb4:	77 1f       	adc	r23, r23
 cb6:	88 1f       	adc	r24, r24
 cb8:	da f7       	brpl	.-10     	; 0xcb0 <__floatsisf+0x62>
 cba:	88 0f       	add	r24, r24
 cbc:	96 95       	lsr	r25
 cbe:	87 95       	ror	r24
 cc0:	97 f9       	bld	r25, 7
 cc2:	08 95       	ret

00000cc4 <__fp_cmp>:
 cc4:	99 0f       	add	r25, r25
 cc6:	00 08       	sbc	r0, r0
 cc8:	55 0f       	add	r21, r21
 cca:	aa 0b       	sbc	r26, r26
 ccc:	e0 e8       	ldi	r30, 0x80	; 128
 cce:	fe ef       	ldi	r31, 0xFE	; 254
 cd0:	16 16       	cp	r1, r22
 cd2:	17 06       	cpc	r1, r23
 cd4:	e8 07       	cpc	r30, r24
 cd6:	f9 07       	cpc	r31, r25
 cd8:	c0 f0       	brcs	.+48     	; 0xd0a <__fp_cmp+0x46>
 cda:	12 16       	cp	r1, r18
 cdc:	13 06       	cpc	r1, r19
 cde:	e4 07       	cpc	r30, r20
 ce0:	f5 07       	cpc	r31, r21
 ce2:	98 f0       	brcs	.+38     	; 0xd0a <__fp_cmp+0x46>
 ce4:	62 1b       	sub	r22, r18
 ce6:	73 0b       	sbc	r23, r19
 ce8:	84 0b       	sbc	r24, r20
 cea:	95 0b       	sbc	r25, r21
 cec:	39 f4       	brne	.+14     	; 0xcfc <__fp_cmp+0x38>
 cee:	0a 26       	eor	r0, r26
 cf0:	61 f0       	breq	.+24     	; 0xd0a <__fp_cmp+0x46>
 cf2:	23 2b       	or	r18, r19
 cf4:	24 2b       	or	r18, r20
 cf6:	25 2b       	or	r18, r21
 cf8:	21 f4       	brne	.+8      	; 0xd02 <__fp_cmp+0x3e>
 cfa:	08 95       	ret
 cfc:	0a 26       	eor	r0, r26
 cfe:	09 f4       	brne	.+2      	; 0xd02 <__fp_cmp+0x3e>
 d00:	a1 40       	sbci	r26, 0x01	; 1
 d02:	a6 95       	lsr	r26
 d04:	8f ef       	ldi	r24, 0xFF	; 255
 d06:	81 1d       	adc	r24, r1
 d08:	81 1d       	adc	r24, r1
 d0a:	08 95       	ret

00000d0c <__fp_inf>:
 d0c:	97 f9       	bld	r25, 7
 d0e:	9f 67       	ori	r25, 0x7F	; 127
 d10:	80 e8       	ldi	r24, 0x80	; 128
 d12:	70 e0       	ldi	r23, 0x00	; 0
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	08 95       	ret

00000d18 <__fp_nan>:
 d18:	9f ef       	ldi	r25, 0xFF	; 255
 d1a:	80 ec       	ldi	r24, 0xC0	; 192
 d1c:	08 95       	ret

00000d1e <__fp_pscA>:
 d1e:	00 24       	eor	r0, r0
 d20:	0a 94       	dec	r0
 d22:	16 16       	cp	r1, r22
 d24:	17 06       	cpc	r1, r23
 d26:	18 06       	cpc	r1, r24
 d28:	09 06       	cpc	r0, r25
 d2a:	08 95       	ret

00000d2c <__fp_pscB>:
 d2c:	00 24       	eor	r0, r0
 d2e:	0a 94       	dec	r0
 d30:	12 16       	cp	r1, r18
 d32:	13 06       	cpc	r1, r19
 d34:	14 06       	cpc	r1, r20
 d36:	05 06       	cpc	r0, r21
 d38:	08 95       	ret

00000d3a <__fp_round>:
 d3a:	09 2e       	mov	r0, r25
 d3c:	03 94       	inc	r0
 d3e:	00 0c       	add	r0, r0
 d40:	11 f4       	brne	.+4      	; 0xd46 <__fp_round+0xc>
 d42:	88 23       	and	r24, r24
 d44:	52 f0       	brmi	.+20     	; 0xd5a <__fp_round+0x20>
 d46:	bb 0f       	add	r27, r27
 d48:	40 f4       	brcc	.+16     	; 0xd5a <__fp_round+0x20>
 d4a:	bf 2b       	or	r27, r31
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0x18>
 d4e:	60 ff       	sbrs	r22, 0
 d50:	04 c0       	rjmp	.+8      	; 0xd5a <__fp_round+0x20>
 d52:	6f 5f       	subi	r22, 0xFF	; 255
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	08 95       	ret

00000d5c <__fp_split3>:
 d5c:	57 fd       	sbrc	r21, 7
 d5e:	90 58       	subi	r25, 0x80	; 128
 d60:	44 0f       	add	r20, r20
 d62:	55 1f       	adc	r21, r21
 d64:	59 f0       	breq	.+22     	; 0xd7c <__fp_splitA+0x10>
 d66:	5f 3f       	cpi	r21, 0xFF	; 255
 d68:	71 f0       	breq	.+28     	; 0xd86 <__fp_splitA+0x1a>
 d6a:	47 95       	ror	r20

00000d6c <__fp_splitA>:
 d6c:	88 0f       	add	r24, r24
 d6e:	97 fb       	bst	r25, 7
 d70:	99 1f       	adc	r25, r25
 d72:	61 f0       	breq	.+24     	; 0xd8c <__fp_splitA+0x20>
 d74:	9f 3f       	cpi	r25, 0xFF	; 255
 d76:	79 f0       	breq	.+30     	; 0xd96 <__fp_splitA+0x2a>
 d78:	87 95       	ror	r24
 d7a:	08 95       	ret
 d7c:	12 16       	cp	r1, r18
 d7e:	13 06       	cpc	r1, r19
 d80:	14 06       	cpc	r1, r20
 d82:	55 1f       	adc	r21, r21
 d84:	f2 cf       	rjmp	.-28     	; 0xd6a <__fp_split3+0xe>
 d86:	46 95       	lsr	r20
 d88:	f1 df       	rcall	.-30     	; 0xd6c <__fp_splitA>
 d8a:	08 c0       	rjmp	.+16     	; 0xd9c <__fp_splitA+0x30>
 d8c:	16 16       	cp	r1, r22
 d8e:	17 06       	cpc	r1, r23
 d90:	18 06       	cpc	r1, r24
 d92:	99 1f       	adc	r25, r25
 d94:	f1 cf       	rjmp	.-30     	; 0xd78 <__fp_splitA+0xc>
 d96:	86 95       	lsr	r24
 d98:	71 05       	cpc	r23, r1
 d9a:	61 05       	cpc	r22, r1
 d9c:	08 94       	sec
 d9e:	08 95       	ret

00000da0 <__fp_zero>:
 da0:	e8 94       	clt

00000da2 <__fp_szero>:
 da2:	bb 27       	eor	r27, r27
 da4:	66 27       	eor	r22, r22
 da6:	77 27       	eor	r23, r23
 da8:	cb 01       	movw	r24, r22
 daa:	97 f9       	bld	r25, 7
 dac:	08 95       	ret

00000dae <__gesf2>:
 dae:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fp_cmp>
 db2:	08 f4       	brcc	.+2      	; 0xdb6 <__gesf2+0x8>
 db4:	8f ef       	ldi	r24, 0xFF	; 255
 db6:	08 95       	ret

00000db8 <__mulsf3>:
 db8:	0e 94 ef 06 	call	0xdde	; 0xdde <__mulsf3x>
 dbc:	0c 94 9d 06 	jmp	0xd3a	; 0xd3a <__fp_round>
 dc0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__fp_pscA>
 dc4:	38 f0       	brcs	.+14     	; 0xdd4 <__mulsf3+0x1c>
 dc6:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fp_pscB>
 dca:	20 f0       	brcs	.+8      	; 0xdd4 <__mulsf3+0x1c>
 dcc:	95 23       	and	r25, r21
 dce:	11 f0       	breq	.+4      	; 0xdd4 <__mulsf3+0x1c>
 dd0:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 dd4:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__fp_nan>
 dd8:	11 24       	eor	r1, r1
 dda:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>

00000dde <__mulsf3x>:
 dde:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__fp_split3>
 de2:	70 f3       	brcs	.-36     	; 0xdc0 <__mulsf3+0x8>

00000de4 <__mulsf3_pse>:
 de4:	95 9f       	mul	r25, r21
 de6:	c1 f3       	breq	.-16     	; 0xdd8 <__mulsf3+0x20>
 de8:	95 0f       	add	r25, r21
 dea:	50 e0       	ldi	r21, 0x00	; 0
 dec:	55 1f       	adc	r21, r21
 dee:	62 9f       	mul	r22, r18
 df0:	f0 01       	movw	r30, r0
 df2:	72 9f       	mul	r23, r18
 df4:	bb 27       	eor	r27, r27
 df6:	f0 0d       	add	r31, r0
 df8:	b1 1d       	adc	r27, r1
 dfa:	63 9f       	mul	r22, r19
 dfc:	aa 27       	eor	r26, r26
 dfe:	f0 0d       	add	r31, r0
 e00:	b1 1d       	adc	r27, r1
 e02:	aa 1f       	adc	r26, r26
 e04:	64 9f       	mul	r22, r20
 e06:	66 27       	eor	r22, r22
 e08:	b0 0d       	add	r27, r0
 e0a:	a1 1d       	adc	r26, r1
 e0c:	66 1f       	adc	r22, r22
 e0e:	82 9f       	mul	r24, r18
 e10:	22 27       	eor	r18, r18
 e12:	b0 0d       	add	r27, r0
 e14:	a1 1d       	adc	r26, r1
 e16:	62 1f       	adc	r22, r18
 e18:	73 9f       	mul	r23, r19
 e1a:	b0 0d       	add	r27, r0
 e1c:	a1 1d       	adc	r26, r1
 e1e:	62 1f       	adc	r22, r18
 e20:	83 9f       	mul	r24, r19
 e22:	a0 0d       	add	r26, r0
 e24:	61 1d       	adc	r22, r1
 e26:	22 1f       	adc	r18, r18
 e28:	74 9f       	mul	r23, r20
 e2a:	33 27       	eor	r19, r19
 e2c:	a0 0d       	add	r26, r0
 e2e:	61 1d       	adc	r22, r1
 e30:	23 1f       	adc	r18, r19
 e32:	84 9f       	mul	r24, r20
 e34:	60 0d       	add	r22, r0
 e36:	21 1d       	adc	r18, r1
 e38:	82 2f       	mov	r24, r18
 e3a:	76 2f       	mov	r23, r22
 e3c:	6a 2f       	mov	r22, r26
 e3e:	11 24       	eor	r1, r1
 e40:	9f 57       	subi	r25, 0x7F	; 127
 e42:	50 40       	sbci	r21, 0x00	; 0
 e44:	9a f0       	brmi	.+38     	; 0xe6c <__mulsf3_pse+0x88>
 e46:	f1 f0       	breq	.+60     	; 0xe84 <__mulsf3_pse+0xa0>
 e48:	88 23       	and	r24, r24
 e4a:	4a f0       	brmi	.+18     	; 0xe5e <__mulsf3_pse+0x7a>
 e4c:	ee 0f       	add	r30, r30
 e4e:	ff 1f       	adc	r31, r31
 e50:	bb 1f       	adc	r27, r27
 e52:	66 1f       	adc	r22, r22
 e54:	77 1f       	adc	r23, r23
 e56:	88 1f       	adc	r24, r24
 e58:	91 50       	subi	r25, 0x01	; 1
 e5a:	50 40       	sbci	r21, 0x00	; 0
 e5c:	a9 f7       	brne	.-22     	; 0xe48 <__mulsf3_pse+0x64>
 e5e:	9e 3f       	cpi	r25, 0xFE	; 254
 e60:	51 05       	cpc	r21, r1
 e62:	80 f0       	brcs	.+32     	; 0xe84 <__mulsf3_pse+0xa0>
 e64:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__fp_inf>
 e68:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__fp_szero>
 e6c:	5f 3f       	cpi	r21, 0xFF	; 255
 e6e:	e4 f3       	brlt	.-8      	; 0xe68 <__mulsf3_pse+0x84>
 e70:	98 3e       	cpi	r25, 0xE8	; 232
 e72:	d4 f3       	brlt	.-12     	; 0xe68 <__mulsf3_pse+0x84>
 e74:	86 95       	lsr	r24
 e76:	77 95       	ror	r23
 e78:	67 95       	ror	r22
 e7a:	b7 95       	ror	r27
 e7c:	f7 95       	ror	r31
 e7e:	e7 95       	ror	r30
 e80:	9f 5f       	subi	r25, 0xFF	; 255
 e82:	c1 f7       	brne	.-16     	; 0xe74 <__mulsf3_pse+0x90>
 e84:	fe 2b       	or	r31, r30
 e86:	88 0f       	add	r24, r24
 e88:	91 1d       	adc	r25, r1
 e8a:	96 95       	lsr	r25
 e8c:	87 95       	ror	r24
 e8e:	97 f9       	bld	r25, 7
 e90:	08 95       	ret

00000e92 <_exit>:
 e92:	f8 94       	cli

00000e94 <__stop_program>:
 e94:	ff cf       	rjmp	.-2      	; 0xe94 <__stop_program>
